import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt
import seaborn as sns
import time

# Load the dataset
df = pd.read_csv("dataset.csv")

# Convert categorical variables to numeric using one-hot encoding
df = pd.get_dummies(df, columns=['user', 'source', 'action'])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop('insiderthreat', axis=1), df['insiderthreat'], test_size=0.2)

# Create the Naive Bayes classifier
gnb = GaussianNB()

# Measure the time it takes to train the classifier
start_time = time.time()

# Train the classifier on the training data
gnb.fit(X_train, y_train)

# Calculate the training time
training_time = time.time() - start_time
print('Training time:', training_time, 'seconds')

# Measure the time it takes to make predictions
start_time = time.time()

# Predict the labels of the test data
y_pred = gnb.predict(X_test)

# Calculate the prediction time
prediction_time = time.time() - start_time
print('Prediction time:', prediction_time, 'seconds')

# Evaluate the performance and plot the confusion matrix as before
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
F1_score = f1_score(y_test, y_pred)

print('Naive Bayes accuracy:', accuracy)
print("Precision :", precision)
print("Recall    :", recall)
print("F1-score  :", F1_score)

# Build confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='g', xticklabels=['Negative', 'Positive'], yticklabels=['Negative', 'Positive'])
plt.ylabel('Prediction', fontsize=13)
plt.xlabel('Actual', fontsize=13)
plt.title('Confusion Matrix', fontsize=17)
plt.show()

print("Confusion matrix:")
print(cm)
