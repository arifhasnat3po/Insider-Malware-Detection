import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import time

# Load the dataset
df = pd.read_csv("dataset.csv")

# Convert categorical variables to numeric using one-hot encoding
df = pd.get_dummies(df, columns=['user', 'source', 'action'])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop('insiderthreat', axis=1), df['insiderthreat'], test_size=0.2)

# Create the Gradient Boosting classifier
gb = GradientBoostingClassifier(n_estimators=100, random_state=42)

# Measure the time it takes to train the classifier
start_time = time.time()

# Train the classifier on the training data
gb.fit(X_train, y_train)

# Calculate the training time
training_time = time.time() - start_time
print('Training time:', training_time, 'seconds')

# Measure the time it takes to make predictions
start_time = time.time()

# Predict the labels of the test data
y_pred = gb.predict(X_test)

# Calculate the prediction time
prediction_time = time.time() - start_time
print('Prediction time:', prediction_time, 'seconds')

# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print('Gradient Boosting accuracy:', accuracy)

# Calculate precision, recall, and F1-score
precision = precision_score(y_test, y_pred)
print("Precision :", precision)
recall = recall_score(y_test, y_pred)
print("Recall    :", recall)
f1 = f1_score(y_test, y_pred)
print("F1-score  :", f1)

# Build the confusion matrix
cm = confusion_matrix(y_test, y_pred)

print("Confusion matrix:")
print(cm)

# Plot the confusion matrix
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['Negative', 'Positive'],
            yticklabels=['Negative', 'Positive'])
plt.ylabel('Prediction', fontsize=13)
plt.xlabel('Actual', fontsize=13)
plt.title('Confusion Matrix', fontsize=17)
plt.show()

# Create a heatmap of the correlation matrix for the training data
sns.heatmap(X_train.corr())
plt.show()
