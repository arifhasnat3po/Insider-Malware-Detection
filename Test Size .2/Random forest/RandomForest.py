import pandas as pd
import numpy as np
import time
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
#from sklearn.metrics import confusion_matrix
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
import seaborn as sns
# load the dataset

df = pd.read_csv("dataset.csv")

# convert categorical variables to numeric using one-hot encoding
df = pd.get_dummies(df, columns=['user', 'source', 'action'])

# split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop('insiderthreat', axis=1), df['insiderthreat'], test_size=0.2)

# create the Random Forest classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)

# train the classifier on the training data
rf.fit(X_train, y_train)

# predict the labels of the test data
y_pred = rf.predict(X_test)

# calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print('Random Forest accuracy:', accuracy)

precision = precision_score(y_test, y_pred)
print("Precision :", precision)
recall = recall_score(y_test, y_pred)
print("Recall    :", recall)
F1_score = f1_score(y_test, y_pred)
print("F1-score  :", F1_score)


# build confusion matrix
cm = confusion_matrix(y_test, y_pred)

print("Confusion matrix:")
print(cm)
#from sklearn.metrics import plot_confusion_matrix

sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['Negative', 'Positive'],
            yticklabels=['Negative', 'Positive'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()



# plot the confusion matrix
# plot_confusion_matrix(rf, X_test, y_test)
# plt.show()
# measure the time it takes to train the classifier
start_time = time.time()
rf.fit(X_train, y_train)
training_time = time.time() - start_time
print('Training time:', training_time, 'seconds')


