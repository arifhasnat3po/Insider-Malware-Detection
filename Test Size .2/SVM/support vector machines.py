import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, precision_score, recall_score
from sklearn.model_selection import train_test_split
#from sklearn.metrics import plot_confusion_matrix
# from mlxtend.plotting import plot_confusion_matrix as plot_confusion_matrix_from_data
from matplotlib import pyplot as plt
# import seaborn as sns
# Load the data

dataframe = pd.read_csv("dataset.csv")

# Encode categorical variables
dataframe = pd.get_dummies(dataframe, columns=['user', 'source', 'action'])

# Split the data into train and test sets
X = dataframe.drop(columns=['insiderthreat'])
y = dataframe['insiderthreat']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the SVM
svm = SVC(kernel='rbf', C=10, gamma=0.1)
svm.fit(X_train, y_train)

# Make predictions on the test set
y_pred = svm.predict(X_test)

# Evaluate the performance
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

f1 = f1_score(y_test, y_pred)
print("F1 score", f1)

precision = precision_score(y_test, y_pred)
print("Precision :", precision)
recall = recall_score(y_test, y_pred)
print("Recall    :", recall)

# Build confusion matrix
cm = confusion_matrix(y_test, y_pred)
# sns.heatmap(cm,
#             annot=True,
#             fmt='g',
#             xticklabels=['Negative', 'Positive'],
#             yticklabels=['Negative', 'Positive'])
# plt.ylabel('Prediction',fontsize=13)
# plt.xlabel('Actual',fontsize=13)
# plt.title('Confusion Matrix',fontsize=17)
# plt.show()

import time

# Measure the time it takes to train the SVM
start_time = time.time()

# Train the SVM
svm = SVC(kernel='rbf', C=10, gamma=0.1)
svm.fit(X_train, y_train)

# Calculate the training time
training_time = time.time() - start_time
print('Training time:', training_time, 'seconds')