import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras import models
from tensorflow.keras import layers
import matplotlib.pyplot as plt
#from sklearn.metrics import plot_confusion_matrix
#from sklearn.metrics import confusion_matrix
from matplotlib import pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from keras.utils.vis_utils import plot_model
import visualkeras
import seaborn as sns
import time

# Load data
dataframe = pd.read_csv("dataset.csv")
X = dataframe.drop('insiderthreat', axis=1)
y = dataframe['insiderthreat']

# Convert categorical variables to one-hot encoding
X = pd.get_dummies(X, columns=['user', 'source', 'action'])

# Split into train, validation, and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Standardize numerical variables
scaler = StandardScaler()
X_train.iloc[:, :3] = scaler.fit_transform(X_train.iloc[:, :3])
X_val.iloc[:, :3] = scaler.transform(X_val.iloc[:, :3])
X_test.iloc[:, :3] = scaler.transform(X_test.iloc[:, :3])

# Build neural network model
model = models.Sequential()
model.add(layers.Dense(32, activation='relu', input_shape=(X_train.shape[1],)))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(8, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(1, activation='sigmoid'))

#tf.keras.utils.plot_model(model, to_file="my_model.png", show_shapes=True)
#visualkeras.layered_view(model)


# Compile model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train model
history = model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_val, y_val))

# Evaluate model on test set
test_loss, test_acc = model.evaluate(X_test, y_test)
print('Test accuracy:', test_acc)


#Loss Fact
fig = plt.figure()
plt.plot(history.history['loss'], color='teal', label='loss')
plt.plot(history.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

#Accuracy Plot
fig = plt.figure()
plt.plot(history.history['accuracy'], color='teal', label='accuracy')
plt.plot(history.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

# Train model and measure time taken
start_time = time.time()
history = model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_val, y_val))
end_time = time.time()
training_time = end_time - start_time
print("Time taken for training:", training_time, "seconds")

# Evaluate model on test set and measure time taken
test_start_time = time.time()
test_loss, test_acc = model.evaluate(X_test, y_test)
test_end_time = time.time()
test_evaluation_time = test_end_time - test_start_time
print("Time taken for test evaluation:", test_evaluation_time, "seconds")

from sklearn.metrics import confusion_matrix

# make predictions on the test set
y_pred = model.predict(X_test)
y_pred_binary = np.round(y_pred)

# build confusion matrix
cm = confusion_matrix(y_test, y_pred_binary)

print("Confusion matrix:")
print(cm)
from sklearn.metrics import ConfusionMatrixDisplay


# plot the confusion matrix
disp = ConfusionMatrixDisplay.from_predictions(y_test, y_pred_binary)
disp.plot()
plt.show()

sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['Negative', 'Positive'],
            yticklabels=['Negative', 'Positive'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()


plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model.summary()
